// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameDataTables
{

using global::System;
using global::FlatBuffers;

public struct ItemTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ItemTable GetRootAsItemTable(ByteBuffer _bb) { return GetRootAsItemTable(_bb, new ItemTable()); }
  public static ItemTable GetRootAsItemTable(ByteBuffer _bb, ItemTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ItemTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string RewardReadme(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RewardReadmeLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public float Hp { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int Cost { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Level { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CostMoney { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemID(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ItemIDLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetItemIDBytes() { return __p.__vector_as_span(18); }
#else
  public ArraySegment<byte>? GetItemIDBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetItemIDArray() { return __p.__vector_as_array<int>(18); }

  public static Offset<ItemTable> CreateItemTable(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset NameOffset = default(StringOffset),
      VectorOffset RewardReadmeOffset = default(VectorOffset),
      float Hp = 0.0f,
      int Cost = 0,
      int Level = 0,
      int CostMoney = 0,
      VectorOffset ItemIDOffset = default(VectorOffset)) {
    builder.StartObject(8);
    ItemTable.AddItemID(builder, ItemIDOffset);
    ItemTable.AddCostMoney(builder, CostMoney);
    ItemTable.AddLevel(builder, Level);
    ItemTable.AddCost(builder, Cost);
    ItemTable.AddHp(builder, Hp);
    ItemTable.AddRewardReadme(builder, RewardReadmeOffset);
    ItemTable.AddName(builder, NameOffset);
    ItemTable.AddId(builder, Id);
    return ItemTable.EndItemTable(builder);
  }

  public static void StartItemTable(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddRewardReadme(FlatBufferBuilder builder, VectorOffset RewardReadmeOffset) { builder.AddOffset(2, RewardReadmeOffset.Value, 0); }
  public static VectorOffset CreateRewardReadmeVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRewardReadmeVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRewardReadmeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHp(FlatBufferBuilder builder, float Hp) { builder.AddFloat(3, Hp, 0.0f); }
  public static void AddCost(FlatBufferBuilder builder, int Cost) { builder.AddInt(4, Cost, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(5, Level, 0); }
  public static void AddCostMoney(FlatBufferBuilder builder, int CostMoney) { builder.AddInt(6, CostMoney, 0); }
  public static void AddItemID(FlatBufferBuilder builder, VectorOffset ItemIDOffset) { builder.AddOffset(7, ItemIDOffset.Value, 0); }
  public static VectorOffset CreateItemIDVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateItemIDVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartItemIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ItemTable> EndItemTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ItemTable>(o);
  }
};

public struct Root_ItemTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Root_ItemTable GetRootAsRoot_ItemTable(ByteBuffer _bb) { return GetRootAsRoot_ItemTable(_bb, new Root_ItemTable()); }
  public static Root_ItemTable GetRootAsRoot_ItemTable(ByteBuffer _bb, Root_ItemTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Root_ItemTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ItemTable? Data(int j) { int o = __p.__offset(4); return o != 0 ? (ItemTable?)(new ItemTable()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Root_ItemTable> CreateRoot_ItemTable(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartObject(1);
    Root_ItemTable.AddData(builder, dataOffset);
    return Root_ItemTable.EndRoot_ItemTable(builder);
  }

  public static void StartRoot_ItemTable(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<ItemTable>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<ItemTable>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Root_ItemTable> EndRoot_ItemTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Root_ItemTable>(o);
  }
  public static void FinishRoot_ItemTableBuffer(FlatBufferBuilder builder, Offset<Root_ItemTable> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedRoot_ItemTableBuffer(FlatBufferBuilder builder, Offset<Root_ItemTable> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
